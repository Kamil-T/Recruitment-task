{"version":3,"sources":["contexts/CompaniesContext.js","helpers/range.js","components/Pagination.js","components/Company.js","hooks/useSortableData.js","components/Search.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["CompaniesContext","createContext","CompaniesProvider","props","useState","error","setError","loading","setLoading","companiesWithIncomes","setCompaniesWithIncomes","useEffect","a","fetch","resComp","json","jsonComp","Promise","all","map","company","id","resInco","jsonInco","incomes","flatMap","income","parseFloat","value","valuesOfIncomes","reduce","b","totalIncome","toFixed","totalIncomeRound","length","averageIncome","Date","today","getMonth","lastMonth","getFullYear","relevantYear","filter","i","date","prev","curr","lastMonthIncome","inco","find","merge","fetchCompanies","data","Provider","children","range","from","to","step","push","LEFT_PAGE","Pagination","totalRecords","pageLimit","currentPage","setCurrentPage","pageNeighbours","Math","max","min","totalPages","ceil","pages","totalNumbers","startPage","lastPage","hasLeftSpill","hasRightSpill","spillOffSet","extraPages","fetchPages","aria-label","className","page","index","key","onClick","aria-hidden","handleClick","Company","currentCompanies","requestSort","sortConfig","biggerScreen","getClassNamesFor","name","direction","undefined","city","useSortableData","items","config","setSortConfig","sortedItems","useMemo","sortableItems","sort","varA","toUpperCase","varB","Search","setFilteredSorted","companies","searchText","setSearchText","filterData","lowercasedValue","toLowerCase","trim","filtered","item","Object","keys","some","toString","includes","type","placeholder","onChange","e","target","autoFocus","Table","useContext","filteredSorted","offset","slice","window","innerWidth","width","setWidth","handleResize","addEventListener","_","removeEventListener","App","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.db2d41fe.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\n\nexport const CompaniesContext = createContext()\n\nconst CompaniesProvider = (props) => {\n  const [error, setError] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [companiesWithIncomes, setCompaniesWithIncomes] = useState(null)\n\n  useEffect(() => {\n    const fetchCompanies = async () => {\n      setLoading(true)\n      try {\n        const resComp = await fetch(\n          'https://recruitment.hal.skygate.io/companies'\n        )\n        const jsonComp = await resComp.json()\n\n        let inco = await Promise.all(\n          jsonComp.map(async (company) => {\n            let resInco = await fetch(\n              `https://recruitment.hal.skygate.io/incomes/${company.id}`\n            )\n            let jsonInco = await resInco.json()\n            let valuesOfIncomes = await jsonInco.incomes.flatMap((income) => {\n              let numbers = parseFloat(income.value)\n              return [numbers]\n            })\n            let totalIncome = await valuesOfIncomes.reduce((a, b) => a + b, 0)\n            let totalIncomeRound = await totalIncome.toFixed(2)\n            let averageIncome = await (\n              totalIncome / valuesOfIncomes.length\n            ).toFixed(2)\n\n            let today = await new Date()\n            let lastMonth = await (today.getMonth() - 1)\n            let relevantYear = await today.getFullYear()\n            if (lastMonth === -1) {\n              relevantYear = -1\n              lastMonth = 11\n            }\n            const lastMonthIncome = await jsonInco.incomes\n              .filter((i) => {\n                const date = new Date(i.date)\n\n                return (\n                  date.getFullYear() === relevantYear &&\n                  date.getMonth() === lastMonth\n                )\n              })\n              .reduce((prev, curr) => prev + parseFloat(curr.value), 0)\n              .toFixed(2)\n\n            return {\n              ...jsonInco,\n              totalIncome: parseFloat(totalIncomeRound),\n              averageIncome: parseFloat(averageIncome),\n              lastMonthIncome: parseFloat(lastMonthIncome),\n            }\n          })\n        )\n\n        const merge = await Promise.all(\n          inco.map((company) => ({\n            ...jsonComp.find((incomes) => incomes.id === company.id),\n            ...company,\n          }))\n        )\n        setCompaniesWithIncomes(merge)\n      } catch (e) {\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchCompanies()\n  }, [])\n\n  const data = [companiesWithIncomes, loading, error]\n\n  return (\n    <CompaniesContext.Provider value={data}>\n      {props.children}\n    </CompaniesContext.Provider>\n  )\n}\n\nexport default CompaniesProvider\n","export const range = (from, to, step = 1) => {\n  let i = from\n  const range = []\n\n  while (i <= to) {\n    range.push(i)\n    i += step\n  }\n  return range\n}\n","import React from 'react'\nimport '../styles/PaginationStyles.css'\nimport { range } from '../helpers/range'\n\nconst LEFT_PAGE = 'LEFT'\nconst RIGHT_PAGE = 'RIGHT'\n\nconst Pagination = ({\n  totalRecords,\n  pageLimit,\n  currentPage,\n  setCurrentPage,\n}) => {\n  const numOfPageNeighbours = 1\n  const pageNeighbours = Math.max(0, Math.min(numOfPageNeighbours, 2))\n  const totalPages = Math.ceil(totalRecords / pageLimit)\n\n  const fetchPages = () => {\n    const totalNumbers = pageNeighbours * 2 + 3\n    const totalBlocks = totalNumbers + 2\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours)\n      const lastPage = Math.min(totalPages - 1, currentPage + pageNeighbours)\n      let pages = range(startPage, lastPage)\n      const hasLeftSpill = startPage > 2\n      const hasRightSpill = totalPages - lastPage > 1\n      const spillOffSet = totalNumbers - (pages.length + 1)\n\n      switch (true) {\n        case hasLeftSpill && !hasRightSpill: {\n          const extraPages = range(startPage - spillOffSet, startPage - 1)\n          pages = [LEFT_PAGE, ...extraPages, ...pages]\n          break\n        }\n\n        case !hasLeftSpill && hasRightSpill: {\n          const extraPages = range(lastPage + 1, lastPage + spillOffSet)\n          pages = [...pages, ...extraPages, RIGHT_PAGE]\n          break\n        }\n\n        case hasLeftSpill && hasRightSpill:\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE]\n          break\n        }\n      }\n      return [1, ...pages, totalPages]\n    }\n    return range(1, totalPages)\n  }\n\n  const handleClick = (page) => {\n    setCurrentPage(page)\n  }\n\n  const handleMoveLeft = () => {\n    setCurrentPage(currentPage - 1)\n  }\n\n  const handleMoveRight = () => {\n    setCurrentPage(currentPage + 1)\n  }\n\n  if (!totalRecords || totalPages === 1) return null\n  const pages = fetchPages()\n\n  return (\n    <div aria-label='Pagination' className='pagination'>\n      <span className='pages'>\n        {currentPage}/{totalPages}\n      </span>\n      <ul className='pages'>\n        {pages.map((page, index) => {\n          if (page === LEFT_PAGE)\n            return (\n              <ul key={index} className='page-item'>\n                <span\n                  className='page-link'\n                  aria-label='Previous'\n                  onClick={() => handleMoveLeft()}>\n                  <span aria-hidden='true'> &lsaquo; </span>\n                  <span className='sr-only'> Previous </span>\n                </span>\n              </ul>\n            )\n\n          if (page === RIGHT_PAGE)\n            return (\n              <ul key={index} className='page-item'>\n                <span\n                  className='page-link'\n                  aria-label='Next'\n                  onClick={() => handleMoveRight()}>\n                  <span className='sr-only'> Next </span>\n                  <span aria-hidden='true'> &rsaquo; </span>\n                </span>\n              </ul>\n            )\n          return (\n            <ul\n              key={index}\n              className={`page-item ${currentPage === page ? 'active' : ''}`}>\n              <span className='page-link' onClick={() => handleClick(page)}>\n                {page}\n              </span>\n            </ul>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Pagination\n","import React from 'react'\nimport '../styles/CompanyStyles.css'\n\nconst Company = ({\n  currentCompanies,\n  requestSort,\n  sortConfig,\n  biggerScreen,\n}) => {\n  const getClassNamesFor = (name) => {\n    if (!sortConfig) {\n      return\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined\n  }\n  return (\n    <div className='table'>\n      <p className='table-item categories'>\n        <span\n          className={getClassNamesFor('id')}\n          onClick={() => requestSort('id')}>\n          Id\n        </span>\n        <span\n          className={getClassNamesFor('name')}\n          onClick={() => requestSort('name')}>\n          Name\n        </span>\n        {biggerScreen && (\n          <span\n            className={getClassNamesFor('city')}\n            onClick={() => requestSort('city')}>\n            City\n          </span>\n        )}\n        <span\n          className={getClassNamesFor('totalIncome')}\n          onClick={() => requestSort('totalIncome')}>\n          Total Inc\n        </span>\n        <span\n          className={getClassNamesFor('averageIncome')}\n          onClick={() => requestSort('averageIncome')}>\n          Average Inc\n        </span>\n        {biggerScreen && (\n          <span\n            className={getClassNamesFor('lastMonthIncome')}\n            onClick={() => requestSort('lastMonthIncome')}>\n            Last Month Inc\n          </span>\n        )}\n      </p>\n      {currentCompanies.map((company) => (\n        <p key={company.id} className='table-item '>\n          <span>{company.id} </span>\n          <span>{company.name} </span>\n          {biggerScreen && <span>{company.city} </span>}\n          <span>{company.totalIncome} </span>\n          <span>{company.averageIncome} </span>\n          {biggerScreen && <span>{company.lastMonthIncome}</span>}\n        </p>\n      ))}\n    </div>\n  )\n}\n\nexport default Company\n","import { useState, useMemo } from 'react'\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = useState(config)\n\n  const sortedItems = useMemo(() => {\n    let sortableItems = [...items]\n\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        const varA =\n          typeof a[sortConfig.key] === 'string'\n            ? a[sortConfig.key].toUpperCase()\n            : a[sortConfig.key]\n        const varB =\n          typeof b[sortConfig.key] === 'string'\n            ? b[sortConfig.key].toUpperCase()\n            : b[sortConfig.key]\n\n        if (varA < varB) {\n          return sortConfig.direction === 'ascending' ? -1 : 1\n        } else if (varA > varB) {\n          return sortConfig.direction === 'ascending' ? 1 : -1\n        }\n        return 0\n      })\n    }\n    return sortableItems\n  }, [items, sortConfig])\n\n  const requestSort = (key) => {\n    let direction = 'ascending'\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending'\n    }\n    setSortConfig({ key, direction })\n  }\n  return { items: sortedItems, requestSort, sortConfig }\n}\n\nexport default useSortableData\n","import React, { useState, useEffect } from 'react'\nimport '../App.css'\n\nconst Search = ({ setFilteredSorted, companies, setCurrentPage }) => {\n  const [searchText, setSearchText] = useState('')\n\n  const handleChange = (value) => {\n    setSearchText(value)\n    filterData(value)\n  }\n\n  const filterData = (value) => {\n    const lowercasedValue = value.toLowerCase().trim()\n    if (lowercasedValue === '') setFilteredSorted(companies)\n    else {\n      const filtered = companies.filter((item) => {\n        return Object.keys(item).some((key) =>\n          item[key].toString().toLowerCase().includes(lowercasedValue)\n        )\n      })\n      setFilteredSorted(filtered)\n      setCurrentPage(1)\n    }\n  }\n\n  useEffect(() => {})\n\n  return (\n    <>\n      <input\n        className='filter'\n        type='text'\n        placeholder='Type to filter'\n        value={searchText}\n        onChange={(e) => handleChange(e.target.value)}\n        autoFocus\n      />\n    </>\n  )\n}\n\nexport default Search\n","import React, { useContext, useState, useEffect } from 'react'\nimport '../App.css'\nimport Pagination from './Pagination'\nimport Company from './Company'\nimport { CompaniesContext } from '../contexts/CompaniesContext'\nimport useSortableData from '../hooks/useSortableData'\nimport Search from './Search'\n\nconst Table = () => {\n  const [companies] = useContext(CompaniesContext)\n  const [filteredSorted, setFilteredSorted] = useState(companies)\n  const { items, requestSort, sortConfig } = useSortableData(filteredSorted)\n  const [currentPage, setCurrentPage] = useState(1)\n  const pageLimit = 25\n  const offset = (currentPage - 1) * pageLimit\n  const currentCompanies = items.slice(offset, offset + pageLimit)\n  const [width, setWidth] = useState(window.innerWidth)\n  const biggerScreen = width > 800\n\n  useEffect(() => {\n    setFilteredSorted(companies)\n\n    function handleResize() {\n      setWidth(window.innerWidth)\n    }\n    window.addEventListener('resize', handleResize)\n\n    return (_) => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [companies])\n\n  return (\n    <>\n      {biggerScreen === false && (\n        <p className='instructions'>\n          Try to rotate a screen to see all table categories. Non-visible\n          categories (city, last month income) included in filter\n        </p>\n      )}\n      <p className='instructions'>Click on category name to sort</p>\n      <div className='controls'>\n        <Search\n          setFilteredSorted={setFilteredSorted}\n          companies={companies}\n          setCurrentPage={setCurrentPage}\n        />\n        <Pagination\n          totalRecords={items.length}\n          pageLimit={pageLimit}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage}\n        />\n      </div>\n      <Company\n        currentCompanies={currentCompanies}\n        requestSort={requestSort}\n        sortConfig={sortConfig}\n        biggerScreen={biggerScreen}\n      />\n    </>\n  )\n}\n\nexport default Table\n","import React, { useContext } from 'react'\nimport './App.css'\nimport { CompaniesContext } from './contexts/CompaniesContext'\nimport Table from './components/Table'\n\nfunction App() {\n  const [companies, loading, error] = useContext(CompaniesContext)\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {loading && <p className='initial-message'>Loading...</p>}\n        {error && <p className='initial-message'>Something went wrong...</p>}\n        {error && console.log(error)}\n        {companies && <Table />}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport CompaniesProvider from './contexts/CompaniesContext'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CompaniesProvider>\n      <App />\n    </CompaniesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}